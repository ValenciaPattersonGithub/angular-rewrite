import { Injectable } from '@angular/core';

@Injectable({
    providedIn: 'root'
})
export class RichTextSanitizerService {    
    constructor() { }

    sanitizeRichText = (richText): string => {
        //Sanitize rich text from WYSIWYG editor, this will remove html tags we consider unsafe and leave only the ones we consider safe
        if (richText !== null && richText !== undefined) {
            let sanitizedText = '';           
                        

            //A better version of the previous whitelist regex that was here, this one will remove any tag that is not in the list of allowed tags
            //It will also remove tags that start with the allowed tag name, but are not actually the allowed tag
            //(for example, <paragraph> would be removed, but <p> would be kept))            
            sanitizedText = richText.replace(
                /<(?!\/?(p|b|i|s|u|span|font|br\/?|div|ul|li|ol|table|tr|td|tbody|thead|th|strong|em|strike|sub|sup|h1|h2|h3|h4|h5|h6)(?=(\s|>)))[^>]*>/g, '');                       

            
            //Blacklist ran after whitelist to clean up anything obvious that might have slipped through
            sanitizedText = sanitizedText.replace(/<(\/?(script|iframe|object|embed|input|style|link|meta|head|title|html|svg|body))[^>]*>/g, '');

            //AWM - Regexes generated by copilot
            return sanitizedText;
        }
        else {
            return richText;
        }

    }
}
